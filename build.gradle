plugins {
    id 'java'
    id 'jacoco'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
}

dependencies {

    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-elytron-security-properties-file'
    implementation 'io.quarkus:quarkus-resteasy-jaxb'
    implementation 'io.quarkus:quarkus-resteasy-multipart'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-container-image-docker'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkiverse.helm:quarkus-helm:0.2.8'
    implementation 'org.jboss.logmanager:log4j2-jboss-logmanager'

    testImplementation 'io.quarkus:quarkus-jacoco'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.quarkus:quarkus-junit5-mockito-config'
    testImplementation 'io.quarkus:quarkus-test-security'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    testImplementation "org.testcontainers:testcontainers:1.17.6"

}

group 'de.skhh.modulf'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    reports {
        junitXml.enabled(true)
        html.enabled(false)
    }
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
    jacocoTestReport.enabled = true
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

jacocoTestCoverageVerification {
    executionData.setFrom("$project.buildDir/jacoco-quarkus.exec")
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

