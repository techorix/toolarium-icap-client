quarkus.http.port=8080

quarkus.log.level=${QUARKUS_LOG_LEVEL:INFO}
quarkus.log.min-level=DEBUG

quarkus.http.body.preallocate-body-buffer=true
quarkus.http.limits.max-form-attribute-size=100M

# disabled to support ready-only containers (https://docs.aws.amazon.com/config/latest/developerguide/ecs-containers-readonly-access.html)
quarkus.vertx.caching=false
quarkus.vertx.classpath-resolving=false

# container creation
quarkus.container-image.builder=docker
quarkus.container-image.build=false
quarkus.container-image.push=false
# set this if you use a private registry
#quarkus.container-image.registry=
quarkus.container-image.group=de.techorix

# for our service we create a basic auth user and role to secure our endpoint
quarkus.security.users.file.enabled=true
quarkus.security.users.file.users=icap-users.properties
quarkus.security.users.file.roles=icap-roles.properties
quarkus.security.users.file.realm-name=IcapRealm
quarkus.security.users.file.plain-text=true
quarkus.http.auth.policy.role-policy1.roles-allowed=User
quarkus.http.auth.permission.roles1.paths=/v1/virus-checker
quarkus.http.auth.permission.roles1.policy=role-policy1

# helm
quarkus.helm.repository.type=ARTIFACTORY
quarkus.helm.repository.url=
quarkus.helm.repository.push=false
quarkus.helm.create-tar-file=true
quarkus.helm.expressions.0.path=(kind == Secret).data
quarkus.helm.expressions.0.expression={{ include "ociConfigJson" . }}
quarkus.helm.extension=tgz
quarkus.helm.type=application
# just in case we want to use it
#quarkus.helm.dependencies.common.alias=common
#quarkus.helm.dependencies.common.repository=https://charts.bitnami.com/bitnami
#quarkus.helm.dependencies.common.version=1.13.0

# kubernetes
quarkus.kubernetes.replicas=1
quarkus.kubernetes.version=1.0.0
quarkus.kubernetes.namespace={{ .Values.namespace }}
quarkus.kubernetes.service-account=shared-icap-svc-account
quarkus.kubernetes.image-pull-secrets={{ .Values.pullSecrets }}
quarkus.kubernetes.resources.requests.memory={{ .Values.resources.requests.memory }}
quarkus.kubernetes.resources.requests.cpu={{ .Values.resources.requests.cpu }}
quarkus.kubernetes.resources.limits.memory={{ .Values.resources.limits.memory }}
quarkus.kubernetes.resources.limits.cpu={{ .Values.resources.limits.cpu }}
# configuration option in helm chart to enable ingress if needed
quarkus.helm.add-if-statement."ingress.enabled".on-resource-kind=Ingress
quarkus.helm.add-if-statement."ingress.enabled".with-default-value=false
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.tls.my-secret.enabled=false
quarkus.kubernetes.ingress.host=shared-icap-generic-ingress-name.de
quarkus.kubernetes.ports.http.path=/q/health
quarkus.kubernetes.service-type=cluster-ip

# configuration of icap virus scanner service we want to relay to
icap.is-enabled=${ICAP_ENABLED:'false'}
icap.hostname=${ICAP_HOSTNAME:localhost}
# FIXME otherwise icap.port has mapping problems and is rendered badly in kubernetes
icap.port=1344
quarkus.kubernetes.env-vars.icap-port.value='1344'
icap.request-source=${ICAP_SOURCE:file}
icap.servicename=${ICAP_SERVICENAME:srv_clamav}
icap.username=${ICAP_USERNAME:user}


# just common prod settings
%prod.quarkus.banner.enabled=false
# worker thread amount - default value is 20
%prod.quarkus.vertx.worker-pool-size=20
